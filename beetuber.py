# -*- coding: utf-8 -*-
"""Beetuber.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17ObNPFz_KDhl9a4IooOB828G1RM1cJ7r

**Contributers**</p>
Hernandesz, Jose</p>
Soledad, Alejandro</p>
**Intention:**</p>
Prepare position data recovered from Deep Lab Cut to be used for plotting of y tracks.</p>
**Upload Data**</p>
The data is uploaded to Colab from Drive.
"""

from google.colab import drive
drive.mount('/content/drive')

"""Pandas Data Frames are used to manipulate the data."""

import pandas as pd
import numpy as np
import math

path="/content/drive/MyDrive/Beetube/result.csv"
original=pd.read_csv(path)
print(original.shape)

# original
trimed = original.drop([0, 1, 2])
tmp=trimed.iloc[:,0:1]
trimed=trimed.drop(['scorer'],axis=1)
H, W=trimed.shape
for i in range (W):
  if i%3==0:
    trimed=trimed.rename(
        columns={
            trimed.keys()[i]:'x'
            # +str(
            #     int(
            #         math.floor(i/9)
            #         )
            #     )
            }
        )
  if i%3==1:
    trimed=trimed.rename(columns={
        trimed.keys()[i]:'y'
        # +str(
        #         int(
        #             math.floor(i/9)
        #             )
        #         )
            }
        )
  if i%3==2:
    trimed=trimed.rename(columns={
        trimed.keys()[i]:'p'
        # +str(
        #         int(
        #             math.floor(i/9)
        #             )
        #         )
            }
        )
trimed.insert(0,'frame',np.array(tmp))
trimed

frames=[]


for i in range(18):
  if i==0:
    tmp=[j for j in range(0,10)]
  else:
    tmp=[j for j in range(i*9+1,i*9+10)]
    tmp.insert(0,0)
  # trimed.reset_index()
  # tmp2=pd.DataFrame({'f':[j for j in range(6000*i,6000*i+6000)]})
  frames.append(
      trimed.iloc[
            [j for j in range(6000)],
            [j for j in tmp]
            ].reset_index(drop=True)
          )

frames[0]

stacked=pd.concat(frames,axis=0,ignore_index=True)
stacked.iloc[107995,2]

"""**Devived bees into Tracks Manually**
</p>Uses the x pixel position iof the tubes to treshhold the bees into tracks.(Fast!)
"""

def categorizer(x):
  if x!=x:
      return x
  bees=[212,397,605,810,1022,1240,1466,1670,1881,2080,2243,2401,2547]
  for i in range(len(bees)):
    if x<=bees[i]:
      return i

stacked.insert(
    10,
    'bee',
    [ categorizer(float(stacked.iloc[i,1])) for i in range(stacked.shape[0]) ]
)

stacked.loc[stacked['bee']==2]

# bees1={}

# for i in range(13):
#   bees1[i]={
#       'head':pd.DataFrame(data={}),
#       'thorax':pd.DataFrame(data={}),
#       'abdomen':pd.DataFrame(data={})
#   }

# bee=[212,397,605,810,1022,1240,1466,1670,1881,2080,2243,2401,2547]

# def concater(n,part,i,j,k):
#   bees1[n][part]=pd.concat(
#         [
#             bees1[n][part],
#             pd.DataFrame({'frame':original.iloc[i,0],
#                           'x':original.iloc[i,j*9+k+1],
#                           'y':original.iloc[i,j*9+k+2],
#                           'prob':original.iloc[i,j*9+k+3]
#                           },index=[i])],axis=0)
#   if (i-3)%312==0 and j==11 and k==6:
#      print(original.iloc[i,j*9+k+1])

# for i in original.loc[3:,:].index:
#   if  (i-3)%312==0:
#     print('**'+str(round((i*100/original.shape[0]),0))+'% complete**')
#   for j in range(20):
#     k=0
#     for part in ['head','thorax', 'abdomen']:
#         temp=float(original.iat[i,j*9+k+1])
#         if temp!=temp:
#           continue
#         elif temp>=0 and temp<bee[0]:
#           concater(0,part,i,j,k)
#         elif temp>=bee[0] and temp<bee[1]:
#           concater(1,part,i,j,k)
#         elif temp>=bee[1] and temp<bee[2]:
#           concater(2,part,i,j,k)
#         elif temp>=bee[2] and temp<bee[3]:
#           concater(3,part,i,j,k)
#         elif temp>=bee[3] and temp<bee[4]:
#           concater(4,part,i,j,k)
#         elif temp>=bee[4] and temp<bee[5]:
#           concater(5,part,i,j,k)
#         elif temp>=bee[5] and temp<bee[6]:
#           concater(6,part,i,j,k)
#         elif temp>=bee[6] and temp<bee[7]:
#           concater(7,part,i,j,k)
#         elif temp>=bee[7] and temp<bee[8]:
#           concater(8,part,i,j,k)
#         elif temp>=bee[8] and temp<bee[9]:
#           concater(9,part,i,j,k)
#         elif temp>=bee[9] and temp<bee[10]:
#           concater(10,part,i,j,k)
#         elif temp>=bee[10] and temp<bee[11]:
#           concater(11,part,i,j,k)
#         elif temp>=bee[11] and temp<bee[12]:
#           concater(12,part,i,j,k)
#         k+=3

part=('head','thorax','abdomen')
feature=('_x','_y','_p')
for i in range(3):
  for j in range(3):
    stacked.columns.values[i*3+1+j] =part[i]+feature[j]

stacked=stacked.dropna()

"""**Save to Drive**"""

from pathlib import Path

filepath = Path('/content/drive/MyDrive/Beetube/5sclip')
filepath.parent.mkdir(parents=True, exist_ok=True)
stacked.to_csv(filepath,index=False)

"""**Scrub Bee for x Values**"""

import numpy as np

X=[]
for i in original.loc[3:,:].index:
  for j in range(20):
    if original.iat[i,j*9+1]==original.iat[i,j*9+1]:
      X.append(original.iat[i,j*9+1])
X=np.array(X)
X=np.sort(X.astype(float))
X=np.reshape(X,(-1,1))
X

"""**Create K-means Clusters**"""

from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=12, random_state=42, init='k-means++',max_iter=30000,).fit(X)

"""**Display K-mean Cluster**"""

import matplotlib.pyplot as plt
plt.rcParams['figure.figsize'] = [11, 100]
plt.scatter(kmeans.labels_,X)

"""**Devide Bees into Tracks Using K-means Clusters**</p>
The x position of each pose prediction is used to predict the cluster to which the prose pediction belongs. (Slow)
"""

bees2={}

for i in range(12):
  bees2[i]={
      'head':pd.DataFrame(data={}),
      'thorax':pd.DataFrame(data={}),
      'abdomen':pd.DataFrame(data={})
  }

# print(bees2.keys())
def concater(n,part,i,j,k):

  bees2[n][part]=pd.concat(
        [
            bees2[n][part],
            pd.DataFrame({'frame':original.iloc[i,0],
                          'x':original.iloc[i,j*9+k+1],
                          'y':original.iloc[i,j*9+k+2],
                          'prob':original.iloc[i,j*9+k+3]
                          },index=[i])],axis=0)
  # if k==3 and (i-3)%312 and j==0 :
  #   print(original.iloc[i,j*9+k+1],' ',bees2[n][part].iloc[-1]['x'],n)



print(original.shape)

for i in original.loc[3:,:].index:
  if (i-3)%312==0:
    print('**'+str(round((100*i/original.shape[0]),0))+'% complete**')
  for j in range(20):
    k=0
    for part in ['head','thorax', 'abdomen']:

        temp=float(original.iat[i,9*j+k+1])


        if temp!=temp:
          k+=3
          continue
        n=kmeans.predict(np.array([[temp]]))
        concater(n[0],part,i,j,k)

        k+=3

print(original.iloc[2:3,0],original.iloc[3,3*0+3+1],kmeans.predict(np.array([[original.iloc[3,10*9+3+1]]])))
bees2[3]['thorax']

"""**Save K-means Tracks to Drive**"""

from pathlib import Path

for i in range(12):
  for part in bees2[i]:
    filepath = Path('/content/drive/MyDrive/Bee Tube-Bee Tube-2022-12-01/bee2_'+str(i)+'_'+part)
    filepath.parent.mkdir(parents=True, exist_ok=True)
    bees2[i][part].dropna().to_csv(filepath,index=False)